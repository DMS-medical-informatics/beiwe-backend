from pprint import pprint

## The various errors we use.
class PythonPlatformDiscoveryError(Exception): pass
class EnvironmentDeploymentFailure(Exception): pass
class IamEntityMissingError(Exception): pass


## There are a bunch of IAM calls that were particularly verbose using the inline variable names,
## factored those out and stuck them here.

def iam_attach_role_policy(iam_client, role_name, arn):
    # This call appears to be idempotent; it returns None.
    iam_client.attach_role_policy(RoleName=role_name, PolicyArn=arn)

def iam_add_role_to_instance_profile(iam_client, instance_profile_name, role_name):
    x = iam_client.add_role_to_instance_profile(InstanceProfileName=instance_profile_name, RoleName=role_name)
    pprint(x)


def iam_create_role(iam_client, role_name, trust_document_json):
    return iam_client.create_role(RoleName=role_name, AssumeRolePolicyDocument=trust_document_json)


def iam_find_role(iam_client, role_name):
    """ We would use iam_client.get_iam_role, but it throws several different errors that are
    literally more specific than any error we can import from boto and catch explicitly because
    it is generated by an error factory. """
    for role in iam_client.list_roles()['Roles']:
        if role['RoleName'] == role_name:
            return role
    raise IamEntityMissingError("IAM could not find Role %s" % role_name)


def iam_find_instance_profile(iam_client, instance_profile_name):
    """ We would use iam_client.get_iam_instance_profile, but it throws several different errors
    that are literally more specific than any error we can import from boto and catch explicitly
    because it is generated by an error factory. """
    # pprint(iam_client.list_instance_profiles())
    for instance_profile in iam_client.list_instance_profiles()['InstanceProfiles']:
        if instance_profile['InstanceProfileName'] == instance_profile_name:
            return instance_profile
    raise IamEntityMissingError("IAM could not find Instance Profile %s" % instance_profile_name)
