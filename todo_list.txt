Write up security doc and take screenshots for IRB
Send them stuff about the text in the app and what it needs

Build a listener for WiFi connected, then try to upload files and download surveys

Make AudioRecorderActivity record to a temporary file, then encrypt that file to a new file either when you press record, or when in onDestroy()->isFinishing().  Make there be only one unencrypted file at a time, make it never get uploaded.  Make it get deleted whenever possible.
Try to add a protection against a half-written encrypted voiceRecordingFile being uploaded.

-What if you make two recordings while on the audiorecorderactivity page

Add crash logging
http://stackoverflow.com/questions/19897628/need-to-handle-uncaught-exception-and-send-log-file
http://www.acra.ch/
http://stackoverflow.com/questions/601503/how-do-i-obtain-crash-data-from-my-android-application

App UI
-Finalize, style, and pretty-ify the UI
-Get an app icon

-(Josh) Change the error logging so that when you try to write to an encrypted datafile without a key (i.e., when you're in the RegisterActivity and the app hasn't yet been registered), the NPE logs a _different_ error than "tried to write to a text file before calling TextFileManager.start()"

-Check if NULLID files are still getting created.  If they are, Figure out what to do with phones uploading NULLID files or files with a patient_id different from the patient_id in the login credentials.  Dump em?  Keep em?  Or something else?

Encryption/security
-Create shim for symmetric encryption
-Write a data download and decryption script

Test Bluetooth

(Josh) Graph of survey responses
-Make it look pretty for all types of survey questions
-Make graph not crash when there are no answers
-Test display on different versions of Android (probably Android v2 and v4), and maybe different screen sizes too
-Fix crappy width scaling; don't hard-code it to 200px wide or whatever it is

AudioRecorder
-Debug audio recorder on Benjamin's phone (API v10)


(Eli)Write a data dump/download script

MMS logging:
-When we receive MMS messages, get and log the "sent time" timestamp from them
-Debug why we log several (like 3) copies of the same MMS when logging sent MMS messages
	(Eli): I tried tracking this behavior down, I'm not positive about it but the best data and answer I have is this:
		Messages live in different "boxes" (inbox, outbox, sent-box, draft-box) and the ContentObserver triggers on various types of updates related to these boxes. We filter out messages that are not in sent-box, this is the behavior I see:
			we get an update when a message moves from one box to another box, however, I swear that messages that are supposed to be in the draft-box frequently claim they are in the sent-box.  buh?  this must be false, I don't know how to filter the data to remove these false updates.
			MMS messages in the sent box get updated when they get read receipts...  the data for these read receipts is always there and is always null.


Change name of server from ubuntu@SCRUBS




LOW PRIORITY:

Timers & data upload
-Add an alert if the phone hasn't been able to upload in a long time?
-Add a server-side alert if a patient hasn't uploaded data in a long time?

Look into optimizing battery/power consumption using timers; Eli may have already built all of this

Admin Panel UI
-Figure out if we're using base.html and what to do with it
-Make user unable to hit "back" button after logout, and return to the admin panel http://stackoverflow.com/a/20652896/1789466
-(Josh) Admin Panel patients list... paginate
-(Josh) Throw in an Admin Panel warning message (don't use IE < 8!)
-Make the page reload after they create a new patient or remove a device

In RegistrationActivity, don't set username and password on the device UNTIL they've been validated by the server.  This would, however, require substantial changes to PostRequest.java.  Leaving it as-is may not actually present any serious security flaws.

Consider making TextFileManager.closeFile() trigger an upload loop... but what happens when many are created at once? Just make closeFile() and createNewFilesForEverything() trigger upload loops.





NOT GOING TO DO THESE THINGS:

Should we try to log when the app was started?  We can't determine whether the app was started on boot or started by the user opening it.  Maybe we should just give up on this

Give researchers the ability to turn off certain listeners for a study. Clearly document how to do this, and don't forget to comment out certain permissions in the AndroidManifest.xml file

Let admins see graph for any patient? (Eli says we shouldn't do this)

Improve reset password UI by not making you go to a new page